import csv
import itertools
import numpy as np
import h5py


record_list = [40673,40675,40678,40685,40699,40708,40709,40716,40717,40718,40725,40728,40736,40739,40742,40749,40750]
num = 17

for itr in range(0,len(record_list),num) :
    num_list=[]
    inputs_list = []
    alarms_list = []
    targets_list = []
    set_num = itr/num + 28
    print('start set' + str(set_num))
    for itr_in in range(itr,itr+num):
        if itr_in >= len(record_list) :
            break
        else :
            #print itr_in
            num_list.append(record_list[itr_in])
            #print(num_list)
    for record_num in num_list :

        wavefilename = 'samplesa'+str(record_num)+'.csv'
        alafilename = 'annotationsa'+str(record_num)+'.txt'
        annfilename = 'alMa'+str(record_num)+'.txt'

        wavefile = open(wavefilename, 'rb')

        csvread = csv.reader(wavefile)
        header = itertools.islice(csvread, 0, 1).next()
        #print(header)
        isII = 0
        # print header
        #print header[1].find('II')
        #print header[2].find('II')
        if header[1].find('II') > 0 : #always pass in this data
            col_idx = 1
            isII = 1

        if isII == 1 :
            itertools.islice(csvread, 0, 1).next()
            data_list = []
            for row in csvread :
                if row[col_idx] == '-' : #'-' can not be converted to float
                   data_list.append('9') # convert string to float
                else:
                   data_list.append(row[col_idx])
                #print(row[col_idx])
            wavefile.close()

            alarm_list = []
            alafile = open(alafilename, 'rb')
            itertools.islice(alafile.readline(), 1).next
            for line1 in alafile :
                ala_str = line1
                alarm_list.append(ala_str)
            alafile.close()

            annot_list = []
            annfile = open(annfilename, 'rb')
            itertools.islice(annfile.readline(), 1).next
            for line in annfile :
                ann_str = line
                annot_list.append(ann_str)
            annfile.close()
            #print(annot_list[10].split()[2])
            #print(annot_list[-1])
            #print(data_list)
            #if annot_list[12] == annot_list[-1] :
                #print(1)

            length = len(data_list)
            ele_length = 125*10 #10 seconds 125Hz
            ele_num = length/ele_length
            #print(ele_num)

            inputs = np.zeros((ele_num, ele_length))
            alarms = np.zeros((ele_num, 1))
            targets = np.zeros((ele_num, 1))
            cursor1=0
            cursor = 0

            #print(data_list[0:1250])
            for i in range(0, ele_num) :
                starttime = i*ele_length
                endtime = (i+1)*ele_length

                check = 1
                #print(data_list[1] < 2 and data_list[1] > -2)
                for ind in range(starttime, endtime) :
                    #print(ind)
                    if float(data_list[ind]) < 2 and float(data_list[ind]) > -2: # row including more than 2 or less than -2 deleted
                        continue
                        #print(check)
                    else :
                        check = 0
                        break
                # print(check(data_list, starttime, endtime))
                #print(float(data_list[i]) < 2 and float(data_list[i]) > -2)

                if check== 1 :
                    inputs[i] = data_list[starttime:endtime]
                #else :
                #    if annot_list[cursor] == annot_list[-1] : #-1 means last element of list
                #        break
                #    cursor = cursor + 1
                #    continue

            #    if annot_list[cursor-1] == annot_list[-1] : #-1 means last element of list
            #        cursor = cursor -1# it prevents list index to be out of range
                ala_string = alarm_list[cursor1]
                ala_string_list = ala_string.split()
                ann_string = annot_list[cursor]
                ann_string_list = ann_string.split()

                normality1=0
                normality = 0
                while int(ala_string_list[2]) >= starttime and int(ala_string_list[2]) <= endtime :
                    #if ann_string_list[3] != 'N' : # alwayts abnormal in alm
                    normality1 = 1
                    if alarm_list[cursor1] == alarm_list[-1] : #-1 means last element of list
                        break # it prevents list index to be out of range
                    elif check == 0: # in target row including more than 2 or less than -2 deleted
                        normality1 = 0
                        cursor1 = cursor1 + 1
                        ala_string = alarm_list[cursor1]
                        ala_string_list = ala_string.split()

                    else :
                       cursor1 = cursor1 + 1
                       ala_string = alarm_list[cursor1]
                       ala_string_list = ala_string.split()

                if normality1 == 1 :
                    alarms[i] = 1


                while int(ann_string_list[2]) >= starttime and int(ann_string_list[2]) <= endtime :
                    #if ann_string_list[3] != 'N' : # alwayts abnormal in alm
                    normality = 1
                    if annot_list[cursor] == annot_list[-1] : #-1 means last element of list
                        break # it prevents list index to be out of range
                    elif check == 0: # in target row including more than 2 or less than -2 deleted
                        normality = 0
                        cursor = cursor + 1
                        ann_string = annot_list[cursor]
                        ann_string_list = ann_string.split()

                    else :
                       cursor = cursor + 1
                       ann_string = annot_list[cursor]
                       ann_string_list = ann_string.split()

                if normality == 1 :
                    targets[i] = 1
            check2=0
            del_list=[]
            for i in range(0,ele_num):
                for j in range(0,1250):
                    if j+12==1249:
                        break
                    if float(inputs[i][j]) == 0 and float(inputs[i][j+1]) == 0 and float(inputs[i][j+2]) == 0 and float(inputs[i][j+3]) == 0 and float(inputs[i][j+4]) == 0 and float(inputs[i][j+5]) == 0 and float(inputs[i][j+6]) == 0 and float(inputs[i][j+7]) == 0 and float(inputs[i][j+8]) == 0 and float(inputs[i][j+9]) == 0 and float(inputs[i][j+10]) == 0 and float(inputs[i][j+11]) == 0 and float(inputs[i][j+12]) == 0 :
                        #print(check2)
                        del_list.append(i)

                        check2 = check2+1
                        break              # row in cludingconsecutive 0 (13 zeros) deleted



            inputs1 = np.zeros((ele_num-check2, ele_length))
            alarms1 = np.zeros((ele_num-check2, 1))
            targets1 = np.zeros((ele_num-check2, 1))
            list_got =[]
            for i in range(0,ele_num):   #make new array and copy
                if i in del_list:
                    continue
                else:
                    list_got.append(i)

            for i, j in zip(range(0,ele_num-check2), list_got):

                inputs1[i]=inputs[j]
                alarms1[i]=alarms[j]
                targets1[i]=targets[j]




            inputs_list.append(inputs1)
            alarms_list.append(alarms1)
            targets_list.append(targets1)




    #post work
    #print(inputs_list)
    #print(len(data_list))
    #print(inputs[5][1])
    #print(inputs[5][2])
    #print(inputs[5][3])
    final_inputs = inputs_list[0]
    final_alarms = alarms_list[0]
    final_targets = targets_list[0]
    for j in range(1,len(inputs_list)) :
        final_inputs = np.append(final_inputs, inputs_list[j], axis=0)
        final_alarms = np.append(final_alarms, alarms_list[j], axis=0)
        final_targets = np.append(final_targets, targets_list[j], axis=0)

    print final_inputs.shape
    print final_alarms.shape
    print final_targets.shape

    h5f = h5py.File('dataset_post'+str(set_num)+'.h5', 'w')
    h5f.create_dataset('inputs', data=final_inputs)
    h5f.create_dataset('alarms', data=final_alarms)
    h5f.create_dataset('targets', data=final_targets)
    h5f.close()
